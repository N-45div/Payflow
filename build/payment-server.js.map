{"version":3,"sources":["../src/payment-server.ts"],"sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { Hex, createPublicClient, http } from 'viem';\nimport { baseSepolia } from 'viem/chains';\nimport fs from 'fs/promises';\nimport path from 'path';\n\ninterface PaymentRequest {\n  amount: number;\n  currency: string;\n  type: string;\n  metadata?: any;\n}\n\ninterface PaymentRecord {\n  id: string;\n  amount: number;\n  currency: string;\n  type: string;\n  txHash: string;\n  timestamp: string;\n  from: string;\n  status: 'pending' | 'confirmed' | 'failed';\n  metadata?: any;\n}\n\nclass PayFlowPaymentServer {\n  private app: express.Application;\n  private port: number;\n  private paymentsFile: string;\n  private publicClient: any;\n\n  constructor(port: number = 3402) {\n    this.app = express();\n    this.port = port;\n    this.paymentsFile = path.join('./payflow-data', 'payment-records.json');\n    \n    // Initialize Viem client for Base Sepolia\n    this.publicClient = createPublicClient({\n      chain: baseSepolia,\n      transport: http()\n    });\n    \n    this.setupMiddleware();\n    this.setupRoutes();\n  }\n\n  private setupMiddleware() {\n    this.app.use(cors());\n    this.app.use(express.json());\n    \n    // x402 middleware - validate payment headers\n    this.app.use((req, res, next) => {\n      console.log(`ðŸ“¡ ${req.method} ${req.path}`);\n      console.log('Headers:', req.headers);\n      next();\n    });\n  }\n\n  private setupRoutes() {\n    // Health check\n    this.app.get('/health', (req, res) => {\n      res.json({ \n        status: 'healthy', \n        server: 'PayFlow x402 Payment Server',\n        timestamp: new Date().toISOString()\n      });\n    });\n\n    // Payment endpoint\n    this.app.post('/payments', async (req, res) => {\n      try {\n        await this.handlePayment(req, res);\n      } catch (error) {\n        console.error('Payment error:', error);\n        res.status(500).json({ error: 'Payment processing failed' });\n      }\n    });\n\n    // Get payment records\n    this.app.get('/payments', async (req, res) => {\n      try {\n        const payments = await this.loadPayments();\n        res.json({ payments });\n      } catch (error) {\n        res.status(500).json({ error: 'Failed to load payments' });\n      }\n    });\n\n    // Get specific payment\n    this.app.get('/payments/:id', async (req, res) => {\n      try {\n        const payments = await this.loadPayments();\n        const payment = payments.find((p: PaymentRecord) => p.id === req.params.id);\n        \n        if (!payment) {\n          return res.status(404).json({ error: 'Payment not found' });\n        }\n        \n        res.json({ payment });\n      } catch (error) {\n        res.status(500).json({ error: 'Failed to load payment' });\n      }\n    });\n\n    // Bounty-specific endpoints\n    this.app.post('/bounty/:bountyId/submit', async (req, res) => {\n      try {\n        await this.handleBountySubmission(req, res);\n      } catch (error) {\n        console.error('Bounty submission error:', error);\n        res.status(500).json({ error: 'Bounty submission failed' });\n      }\n    });\n  }\n\n  private async handlePayment(req: express.Request, res: express.Response) {\n    const paymentRequired = req.headers['x-payment-required'] as string;\n    const paymentCurrency = req.headers['x-payment-currency'] as string || 'USDC';\n    const paymentNetwork = req.headers['x-payment-network'] as string || 'base-sepolia';\n    \n    const body: PaymentRequest = req.body;\n    \n    console.log('ðŸ’³ Processing payment request:');\n    console.log('Required:', paymentRequired);\n    console.log('Currency:', paymentCurrency);\n    console.log('Network:', paymentNetwork);\n    console.log('Body:', body);\n\n    // Validate payment amount\n    const requiredAmount = parseFloat(paymentRequired || '0');\n    const requestAmount = body.amount || 0;\n    \n    if (requiredAmount > 0 && requestAmount < requiredAmount) {\n      return res.status(402).json({\n        error: 'Payment Required',\n        required: requiredAmount,\n        currency: paymentCurrency,\n        message: `Payment of ${requiredAmount} ${paymentCurrency} required`\n      });\n    }\n\n    // Simulate payment processing\n    const paymentId = `pay_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n    const txHash = `0x${Math.random().toString(16).substring(2)}${Math.random().toString(16).substring(2)}`;\n    \n    const payment: PaymentRecord = {\n      id: paymentId,\n      amount: requestAmount,\n      currency: paymentCurrency,\n      type: body.type || 'general',\n      txHash,\n      timestamp: new Date().toISOString(),\n      from: 'x402-client',\n      status: 'confirmed',\n      metadata: body.metadata\n    };\n\n    // Save payment record\n    await this.savePayment(payment);\n\n    console.log(`âœ… Payment processed: ${paymentId}`);\n    console.log(`ðŸ’° Amount: ${requestAmount} ${paymentCurrency}`);\n    console.log(`ðŸ”— Tx Hash: ${txHash}`);\n\n    // Respond with x402 headers\n    res.set({\n      'x402-payment-id': paymentId,\n      'x402-tx-hash': txHash,\n      'x402-price': requestAmount.toString(),\n      'x402-currency': paymentCurrency,\n      'x402-network': paymentNetwork,\n      'x402-payment-confirmed': 'true'\n    });\n\n    res.json({\n      success: true,\n      payment: payment,\n      message: `Payment of ${requestAmount} ${paymentCurrency} processed successfully`\n    });\n  }\n\n  private async handleBountySubmission(req: express.Request, res: express.Response) {\n    const { bountyId } = req.params;\n    const { submissionData, submissionType, submitterWallet } = req.body;\n    \n    console.log(`ðŸŽ¯ Processing bounty submission for: ${bountyId}`);\n    \n    // This would normally validate against the bounty database\n    // For now, we'll simulate the entry fee requirement\n    const entryFee = 0.02; // Default entry fee\n    \n    const paymentId = `bounty_${bountyId}_${Date.now()}`;\n    const txHash = `0x${Math.random().toString(16).substring(2)}${Math.random().toString(16).substring(2)}`;\n    \n    const payment: PaymentRecord = {\n      id: paymentId,\n      amount: entryFee,\n      currency: 'USDC',\n      type: 'bounty_entry',\n      txHash,\n      timestamp: new Date().toISOString(),\n      from: submitterWallet,\n      status: 'confirmed',\n      metadata: {\n        bountyId,\n        submissionData,\n        submissionType\n      }\n    };\n\n    await this.savePayment(payment);\n\n    res.set({\n      'x402-payment-id': paymentId,\n      'x402-tx-hash': txHash,\n      'x402-price': entryFee.toString(),\n      'x402-currency': 'USDC',\n      'x402-payment-confirmed': 'true'\n    });\n\n    res.json({\n      success: true,\n      payment: payment,\n      submission: {\n        bountyId,\n        submissionData,\n        submissionType,\n        submitter: submitterWallet\n      }\n    });\n  }\n\n  private async loadPayments(): Promise<PaymentRecord[]> {\n    try {\n      await fs.mkdir(path.dirname(this.paymentsFile), { recursive: true });\n      const data = await fs.readFile(this.paymentsFile, 'utf-8');\n      return JSON.parse(data);\n    } catch {\n      return [];\n    }\n  }\n\n  private async savePayment(payment: PaymentRecord) {\n    const payments = await this.loadPayments();\n    payments.push(payment);\n    await fs.writeFile(this.paymentsFile, JSON.stringify(payments, null, 2));\n  }\n\n  public start() {\n    this.app.listen(this.port, () => {\n      console.log(`ðŸ”¥ PayFlow Payment Server running on port ${this.port}`);\n      console.log(`ðŸ’³ x402 payment endpoint: http://localhost:${this.port}/payments`);\n      console.log(`ðŸŽ¯ Bounty submissions: http://localhost:${this.port}/bounty/:id/submit`);\n      console.log(`ðŸ“Š Health check: http://localhost:${this.port}/health`);\n      console.log(`âš¡ Ready to process real payments!`);\n    });\n  }\n}\n\nasync function main() {\n  const port = parseInt(process.env.PAYMENT_SERVER_PORT || '3402');\n  const server = new PayFlowPaymentServer(port);\n  server.start();\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { PayFlowPaymentServer };\n"],"mappings":"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","names":[]}