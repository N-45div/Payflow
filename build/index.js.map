{"version":3,"sources":["../src/index.ts","../src/getAgentKit.ts","../src/payflowtools.ts"],"sourcesContent":["import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { CallToolRequestSchema, ListToolsRequestSchema } from \"@modelcontextprotocol/sdk/types.js\";\nimport { getMcpTools } from \"@coinbase/agentkit-model-context-protocol\";\nimport { getAgentKit } from \"./getAgentKit.js\";\nimport { getPayFlowTools } from \"./payflowtools.js\";\nimport { config } from \"dotenv\";\n\n// Load environment variables\nconfig();\n\n/**\n * PayFlow MCP - Autonomous Payment Flows for AI Agents\n * Combines CDP Wallet (from AgentKit) with x402pay for autonomous payment processing\n */\nasync function main() {\n  const agentKit = await getAgentKit();\n\n  // Get CDP wallet tools from AgentKit\n  const { tools: cdpTools, toolHandler: cdpToolHandler } = await getMcpTools(agentKit);\n  \n  // Get PayFlow-specific tools (x402pay integration)\n  const { tools: payflowTools, toolHandler: payflowToolHandler } = await getPayFlowTools(agentKit);\n\n  // Combine all tools\n  const allTools = [...cdpTools, ...payflowTools];\n\n  const server = new Server(\n    {\n      name: \"payflow-mcp\",\n      version: \"1.0.0\",\n    },\n    {\n      capabilities: {\n        tools: {},\n      },\n    },\n  );\n\n  server.setRequestHandler(ListToolsRequestSchema, async () => {\n    return {\n      tools: allTools,\n    };\n  });\n\n  server.setRequestHandler(CallToolRequestSchema, async request => {\n    try {\n      const toolName = request.params.name;\n      \n      // Route to appropriate handler\n      if (payflowTools.some(tool => tool.name === toolName)) {\n        return payflowToolHandler(request.params.name, request.params.arguments);\n      } else {\n        return cdpToolHandler(request.params.name, request.params.arguments);\n      }\n    } catch (error) {\n      throw new Error(`Tool ${request.params.name} failed: ${error}`);\n    }\n  });\n\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.log(\"PayFlow MCP Server running! 🚀💰\");\n}\n\nmain().catch(console.error);\n","import {\n  AgentKit,\n  cdpApiActionProvider,\n  cdpWalletActionProvider,\n  CdpWalletProvider,\n  erc20ActionProvider,\n  pythActionProvider,\n  walletActionProvider,\n  wethActionProvider,\n} from \"@coinbase/agentkit\";\n\n/**\n * Get the AgentKit instance.\n *\n * @returns {Promise<AgentKit>} The AgentKit instance\n */\nexport async function getAgentKit(): Promise<AgentKit> {\n  try {\n    // Initialize WalletProvider: https://docs.cdp.coinbase.com/agentkit/docs/wallet-management\n    const walletProvider = await CdpWalletProvider.configureWithWallet({\n      apiKeyId: process.env.CDP_API_KEY_ID || \"e219fe75-fbb8-4d52-be67-221acf313d3d\",\n      apiKeySecret: process.env.CDP_API_KEY_SECRET || \"e5JdA1PPosc5UdhqsUCeWVf245Mf+fbmoJN01ViU67b/Ho+vm6PNMSrpqTjV2u52Z7pQkrD+y8i2Ki9Vwwwffg==\",\n      networkId: process.env.NETWORK_ID || \"base-sepolia\",\n    });\n\n    // Initialize AgentKit: https://docs.cdp.coinbase.com/agentkit/docs/agent-actions\n    const agentkit = await AgentKit.from({\n      walletProvider,\n      actionProviders: [\n        wethActionProvider(),\n        pythActionProvider(),\n        walletActionProvider(),\n        erc20ActionProvider(),\n        cdpApiActionProvider({\n          apiKeyId: process.env.CDP_API_KEY_ID,\n          apiKeySecret: process.env.CDP_API_KEY_SECRET,\n        }),\n        cdpWalletActionProvider({\n          apiKeyId: process.env.CDP_API_KEY_ID,\n          apiKeySecret: process.env.CDP_API_KEY_SECRET,\n        }),\n      ],\n    });\n\n    return agentkit;\n  } catch (error) {\n    console.error(\"Error initializing agent:\", error);\n    throw new Error(\"Failed to initialize agent\");\n  }\n}\n","import axios from \"axios\";\nimport { Hex } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { AgentKit } from \"@coinbase/agentkit\";\n\n// Dynamic import for x402-axios\nlet withPaymentInterceptor: any;\n\nasync function initializePaymentInterceptor() {\n  if (!withPaymentInterceptor) {\n    const x402Module = await import(\"x402-axios\");\n    withPaymentInterceptor = x402Module.withPaymentInterceptor;\n  }\n  return withPaymentInterceptor;\n}\n\nexport async function getPayFlowTools(agentKit: AgentKit) {\n  // Initialize payment interceptor\n  await initializePaymentInterceptor();\n  \n  const privateKey = process.env.X402_PRIVATE_KEY as Hex;\n  if (!privateKey) {\n    console.warn(\"X402_PRIVATE_KEY not set - paid API calls will be disabled\");\n    return { tools: getCdpOnlyTools(agentKit), toolHandler: cdpOnlyHandler(agentKit) };\n  }\n\n  // Validate private key format\n  if (!privateKey.startsWith('0x') || privateKey.length !== 66) {\n    throw new Error(`Invalid X402_PRIVATE_KEY format. Expected: 0x followed by 64 hex characters. Got length: ${privateKey.length}`);\n  }\n\n  \n  const account = privateKeyToAccount(privateKey);\n\n  const tools = [\n    {\n      name: \"call_paid_api\",\n      description: \"Make a paid API call using x402pay - automatically handles payment if required\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          url: { type: \"string\", description: \"Full URL of the API endpoint\" },\n          method: { type: \"string\", description: \"HTTP method\", enum: [\"GET\", \"POST\"], default: \"GET\" },\n          data: { type: \"object\", description: \"Request body for POST requests\" },\n          headers: { type: \"object\", description: \"Additional headers\" }\n        },\n        required: [\"url\"]\n      }\n    },\n    {\n      name: \"create_paid_service_config\",\n      description: \"Generate configuration for setting up a paid API service\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          serviceName: { type: \"string\", description: \"Name of your paid service\" },\n          pricePerRequest: { type: \"number\", description: \"Price in USDC per API call\" },\n          description: { type: \"string\", description: \"What your service does\" }\n        },\n        required: [\"serviceName\", \"pricePerRequest\", \"description\"]\n      }\n    },\n    {\n      name: \"setup_bounty_board\",\n      description: \"Create a complete bounty board system with automated payments\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          bountyTitle: { type: \"string\", description: \"Title of the bounty\" },\n          bountyAmount: { type: \"number\", description: \"Total reward in USDC\" },\n          entryFee: { type: \"number\", description: \"Entry fee per submission in USDC\" },\n          maxSubmissions: { type: \"number\", description: \"Maximum number of submissions\", default: 10 },\n          evaluationCriteria: { type: \"string\", description: \"How submissions will be judged\" }\n        },\n        required: [\"bountyTitle\", \"bountyAmount\", \"entryFee\", \"evaluationCriteria\"]\n      }\n    },\n    {\n      name: \"revenue_split_payment\",\n      description: \"Automatically split received payments to multiple wallets\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          totalAmount: { type: \"number\", description: \"Total amount to split in USDC\" },\n          recipients: { \n            type: \"array\", \n            items: {\n              type: \"object\",\n              properties: {\n                address: { type: \"string\", description: \"Wallet address\" },\n                percentage: { type: \"number\", description: \"Percentage of total (0-100)\" },\n                label: { type: \"string\", description: \"Description of this recipient\" }\n              },\n              required: [\"address\", \"percentage\"]\n            }\n          }\n        },\n        required: [\"totalAmount\", \"recipients\"]\n      }\n    },\n    {\n      name: \"create_micropayment_service\",\n      description: \"Set up a micro-SaaS with per-use charging\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          serviceName: { type: \"string\", description: \"Name of the service\" },\n          pricePerUse: { type: \"number\", description: \"Price per usage in USDC\" },\n          serviceType: { type: \"string\", description: \"Type of service\", enum: [\"ai-query\", \"data-analysis\", \"api-access\", \"content-generation\"] },\n          affiliatePercentage: { type: \"number\", description: \"Percentage for affiliates (0-50)\", default: 10 }\n        },\n        required: [\"serviceName\", \"pricePerUse\", \"serviceType\"]\n      }\n    }\n  ];\n\n  const toolHandler = async (name: string, args: any) => {\n    switch (name) {\n      case \"call_paid_api\":\n        return await callPaidApi(account, args);\n        \n      case \"create_paid_service_config\":\n        return await createPaidServiceConfig(args);\n        \n      case \"setup_bounty_board\":\n        return await setupBountyBoard(agentKit, args);\n        \n      case \"revenue_split_payment\":\n        return await revenueSplitPayment(agentKit, args);\n        \n      case \"create_micropayment_service\":\n        return await createMicropaymentService(args);\n        \n      default:\n        throw new Error(`Unknown tool: ${name}`);\n    }\n  };\n\n  return { tools, toolHandler };\n}\n\n// Implementation functions\nasync function callPaidApi(account: any, args: any) {\n  try {\n    // Create axios client with payment interceptor\n    const client = withPaymentInterceptor(axios.create(), account);\n    \n    const { url, method = \"GET\", data, headers } = args;\n    \n    const response = await client({\n      url,\n      method,\n      data,\n      headers\n    });\n    \n    return {\n      content: [{ \n        type: \"text\", \n        text: `✅ Paid API call successful!\n\n🔗 URL: ${url}\n💰 Payment: Handled automatically via x402pay\n📊 Response: ${JSON.stringify(response.data, null, 2)}\n\nThe payment was processed seamlessly in the background! 🚀` \n      }]\n    };\n  } catch (error: any) {\n    if (error.response?.status === 402) {\n      return {\n        content: [{ \n          type: \"text\", \n          text: `💳 Payment required for ${args.url}\n          \nError: Payment could not be processed automatically.\nPlease check:\n- Your wallet has sufficient USDC balance\n- The x402pay service is properly configured\n- Your private key is valid\n\nError details: ${error.message}` \n        }]\n      };\n    }\n    \n    throw new Error(`API call failed: ${error.message}`);\n  }\n}\n\nasync function createPaidServiceConfig(args: any) {\n  const { serviceName, pricePerRequest, description } = args;\n  \n  const config = {\n    serviceName,\n    pricePerRequest,\n    description,\n    x402Config: {\n      paymentRequired: true,\n      currency: \"USDC\",\n      network: \"base-sepolia\",\n      price: pricePerRequest\n    },\n    implementationExample: `\n// Express.js implementation\napp.get('/your-service', async (req, res) => {\n  // x402 payment check happens automatically\n  // Your service logic here\n  res.json({ data: \"your paid content\" });\n});`\n  };\n  \n  return {\n    content: [{ \n      type: \"text\", \n      text: `🔧 Paid Service Configuration Generated!\n\n📋 Service: ${serviceName}\n💰 Price: $${pricePerRequest} USDC per request\n📝 Description: ${description}\n\nYour service is ready to:\n✅ Accept x402pay payments automatically\n✅ Serve content only after payment\n✅ Handle multiple payment networks\n\nNext steps:\n1. Implement the payment endpoint\n2. Deploy your service\n3. Test with PayFlow MCP!\n\nConfiguration saved for autonomous operation! 🎯` \n    }]\n  };\n}\n\nasync function setupBountyBoard(agentKit: AgentKit, args: any) {\n  const { bountyTitle, bountyAmount, entryFee, maxSubmissions, evaluationCriteria } = args;\n  \n  const bountyId = `bounty_${Date.now()}`;\n  const totalPoolSize = bountyAmount + (entryFee * maxSubmissions);\n  \n  return {\n    content: [{ \n      type: \"text\", \n      text: `🎯 Bounty Board Created!\n\n🏆 BOUNTY: ${bountyTitle}\n💰 Reward: $${bountyAmount} USDC\n🎫 Entry Fee: $${entryFee} USDC\n👥 Max Submissions: ${maxSubmissions}\n📊 Total Pool: $${totalPoolSize} USDC\n\n📋 Evaluation: ${evaluationCriteria}\n\n🤖 AUTOMATED FEATURES:\n✅ Entry fee collection via x402pay\n✅ Submission evaluation via AI\n✅ Automatic winner payouts via CDP Wallet\n✅ Entry fee refunds for quality submissions\n\nBounty ID: ${bountyId}\nStatus: 🟢 LIVE\n\nThe system will operate autonomously! 🚀` \n    }]\n  };\n}\n\nasync function revenueSplitPayment(agentKit: AgentKit, args: any) {\n  const { totalAmount, recipients } = args;\n  \n  let distributionPlan = `💸 Revenue Split Execution\\n\\n`;\n  distributionPlan += `Total Amount: $${totalAmount} USDC\\n\\n`;\n  \n  let totalPercentage = 0;\n  \n  for (const recipient of recipients) {\n    const amount = (totalAmount * recipient.percentage) / 100;\n    totalPercentage += recipient.percentage;\n    \n    distributionPlan += `📤 ${recipient.label || 'Recipient'}: $${amount.toFixed(2)} USDC (${recipient.percentage}%)\\n`;\n    distributionPlan += `   → ${recipient.address}\\n\\n`;\n  }\n  \n  if (Math.abs(totalPercentage - 100) > 0.01) {\n    throw new Error(`Invalid split: percentages total ${totalPercentage}% (should be 100%)`);\n  }\n  \n  return {\n    content: [{ \n      type: \"text\", \n      text: distributionPlan + `✅ Revenue split configured successfully!\n🤖 Payments will be executed automatically via CDP Wallet\n⚡ All transactions will be atomic and secure\n\nReady for autonomous revenue distribution! 🎊` \n    }]\n  };\n}\n\nasync function createMicropaymentService(args: any) {\n  const { serviceName, pricePerUse, serviceType, affiliatePercentage } = args;\n  \n  const platformFee = 5; // 5% platform fee\n  const creatorPercentage = 100 - affiliatePercentage - platformFee;\n  \n  return {\n    content: [{ \n      type: \"text\", \n      text: `🏭 Micro-SaaS Service Created!\n\n🎯 Service: ${serviceName}\n🔧 Type: ${serviceType}\n💰 Price per use: $${pricePerUse} USDC\n\n💸 REVENUE DISTRIBUTION:\n- Creator: ${creatorPercentage}% ($${(pricePerUse * creatorPercentage / 100).toFixed(3)})\n- Affiliates: ${affiliatePercentage}% ($${(pricePerUse * affiliatePercentage / 100).toFixed(3)})\n- Platform: ${platformFee}% ($${(pricePerUse * platformFee / 100).toFixed(3)})\n\n🤖 AUTONOMOUS FEATURES:\n✅ x402pay gated access\n✅ Per-use billing\n✅ Automatic affiliate payouts\n✅ Self-funding operation\n\nYour micro-SaaS is ready to generate revenue! 🚀💰` \n    }]\n  };\n}\n\n// Fallback tools when x402 is not configured\nfunction getCdpOnlyTools(agentKit: AgentKit) {\n  return [\n    {\n      name: \"setup_basic_wallet_operations\",\n      description: \"Set up basic CDP Wallet operations for payment flows\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          operation: { type: \"string\", enum: [\"create_wallet\", \"check_balance\", \"transfer\"] }\n        },\n        required: [\"operation\"]\n      }\n    }\n  ];\n}\n\nfunction cdpOnlyHandler(agentKit: AgentKit) {\n  return async (name: string, args: any) => {\n    return {\n      content: [{ \n        type: \"text\", \n        text: \"⚠️ x402pay integration requires X402_PRIVATE_KEY environment variable. Using CDP Wallet tools only.\" \n      }]\n    };\n  };\n}\n"],"mappings":"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","names":["config"]}