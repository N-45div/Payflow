{"version":3,"sources":["../src/client.ts"],"sourcesContent":["import { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\nimport { StdioClientTransport } from \"@modelcontextprotocol/sdk/client/stdio.js\";\nimport * as readline from 'node:readline/promises';\n\ninterface MCPTool {\n  name: string;\n  description: string;\n  inputSchema: any;\n}\n\nclass PayFlowMCPClient {\n  private mcp: Client;\n  private transport: StdioClientTransport | null = null;\n  private tools: MCPTool[] = [];\n\n  constructor() {\n    // Initialize MCP client\n    this.mcp = new Client({ \n      name: \"payflow-mcp-client\", \n      version: \"1.0.0\" \n    }, {\n      capabilities: {\n        tools: {}\n      }\n    });\n  }\n\n  async connectToServer(serverScriptPath: string) {\n    /**\n     * Connect to PayFlow MCP server\n     *\n     * @param serverScriptPath - Path to the server script\n     */\n    try {\n      console.log(`üöÄ Connecting to PayFlow server: ${serverScriptPath}`);\n      \n      // Initialize transport for Node.js script\n      this.transport = new StdioClientTransport({\n        command: process.execPath, // node\n        args: [serverScriptPath],\n      });\n      \n      await this.mcp.connect(this.transport);\n      console.log(\"‚úÖ Connected to PayFlow MCP server\");\n\n      // List available tools\n      console.log(\"üì° Fetching available tools...\");\n      const toolsResult = await this.mcp.listTools();\n      \n      this.tools = toolsResult.tools.map((tool: any) => ({\n        name: tool.name,\n        description: tool.description,\n        inputSchema: tool.inputSchema,\n      }));\n      \n      console.log(\"‚úÖ Available PayFlow tools:\");\n      this.tools.forEach((tool, i) => {\n        console.log(`  ${i + 1}. ${tool.name} - ${tool.description}`);\n      });\n      \n    } catch (error) {\n      console.error(\"‚ùå Failed to connect to PayFlow MCP server:\", error);\n      throw error;\n    }\n  }\n\n  async callTool(toolName: string, args: any = {}) {\n    /**\n     * Call a PayFlow tool directly\n     *\n     * @param toolName - Name of the tool to call\n     * @param args - Arguments for the tool\n     * @returns Tool execution result\n     */\n    try {\n      console.log(`‚ö° Calling tool: ${toolName}`);\n      console.log(`üìã Arguments:`, JSON.stringify(args, null, 2));\n      \n      const result = await this.mcp.callTool({\n        name: toolName,\n        arguments: args,\n      });\n      \n      return result;\n    } catch (error) {\n      console.error(`‚ùå Tool call failed for ${toolName}:`, error);\n      throw error;\n    }\n  }\n\n  displayResult(result: any) {\n    console.log(\"\\n‚úÖ Result:\");\n    console.log(\"=\".repeat(50));\n    \n    if (result.content) {\n      result.content.forEach((item: any) => {\n        if (item.type === 'text' && item.text) {\n          console.log(item.text);\n        } else {\n          console.log(JSON.stringify(item, null, 2));\n        }\n      });\n    } else {\n      console.log(JSON.stringify(result, null, 2));\n    }\n    \n    console.log(\"=\".repeat(50));\n  }\n\n  async interactiveLoop() {\n    /**\n     * Run an interactive PayFlow session\n     */\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n\n    try {\n      console.log(\"\\nüéØ PayFlow MCP Client Started!\");\n      console.log(\"Available commands:\");\n      console.log(\"  - list: Show all tools\");\n      console.log(\"  - call <tool_name>: Call a tool interactively\");\n      console.log(\"  - quick: Run quick tests\");\n      console.log(\"  - demo: Run full demo\");\n      console.log(\"  - quit: Exit\");\n\n      while (true) {\n        const command = await rl.question(\"\\nüí∞ PayFlow> \");\n        \n        if (command.toLowerCase() === \"quit\") {\n          break;\n        }\n        \n        await this.handleCommand(command, rl);\n      }\n    } finally {\n      rl.close();\n    }\n  }\n\n  async handleCommand(command: string, rl: readline.Interface) {\n    const parts = command.trim().split(/\\s+/);\n    const cmd = parts[0].toLowerCase();\n    const arg = parts[1];\n\n    try {\n      switch (cmd) {\n        case 'list':\n          this.listTools();\n          break;\n          \n        case 'call':\n          if (arg) {\n            await this.callToolInteractively(arg, rl);\n          } else {\n            console.log(\"Usage: call <tool_name>\");\n          }\n          break;\n          \n        case 'quick':\n          await this.runQuickTests();\n          break;\n          \n        case 'demo':\n          await this.runFullDemo(rl);\n          break;\n          \n        default:\n          console.log(\"Unknown command. Type 'list', 'call <tool>', 'quick', 'demo', or 'quit'\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Command failed:\", error);\n    }\n  }\n\n  listTools() {\n    console.log(\"\\nüì¶ Available PayFlow Tools:\");\n    this.tools.forEach((tool, i) => {\n      console.log(`\\n${i + 1}. üîß ${tool.name}`);\n      console.log(`   üìù ${tool.description}`);\n      if (tool.inputSchema?.properties) {\n        const params = Object.keys(tool.inputSchema.properties);\n        console.log(`   üìã Parameters: ${params.join(', ')}`);\n      }\n    });\n  }\n\n  async runQuickTests() {\n    console.log(\"\\nüß™ Running PayFlow Quick Tests...\");\n    \n    // Test 1: Wallet details\n    try {\n      console.log(\"\\n1. Testing wallet details...\");\n      const walletResult = await this.callTool(\"get_wallet_details\");\n      console.log(\"‚úÖ Wallet test passed\");\n    } catch (error : any) {\n      console.log(\"‚ö†Ô∏è Wallet test failed:\", error.message);\n    }\n    \n    // Test 2: Analytics\n    try {\n      console.log(\"\\n2. Testing analytics...\");\n      const analyticsResult = await this.callTool(\"view_payflow_analytics\", { timeframe: \"all\" });\n      console.log(\"‚úÖ Analytics test passed\");\n    } catch (error : any) {\n      console.log(\"‚ö†Ô∏è Analytics test failed:\", error.message);\n    }\n    \n    console.log(\"\\nüéØ Quick tests completed!\");\n  }\n\n  async runFullDemo(rl: readline.Interface) {\n    console.log(\"\\nüéØ PayFlow Full Demo\");\n    console.log(\"=\".repeat(25));\n    \n    const choice = await rl.question(`\nWhat would you like to create?\n1. üéØ Bounty board\n2. üîß Micropayment service  \n3. üí∏ Revenue split\n4. üì° Paid API call\n\nEnter choice (1-4): `);\n\n    switch (choice.trim()) {\n      case '1':\n        await this.demoBountyBoard(rl);\n        break;\n      case '2':\n        await this.demoMicropaymentService(rl);\n        break;\n      case '3':\n        await this.demoRevenueSplit(rl);\n        break;\n      case '4':\n        await this.demoPaidAPI(rl);\n        break;\n      default:\n        console.log(\"Invalid choice\");\n    }\n  }\n\n  async demoBountyBoard(rl: readline.Interface) {\n    console.log(\"\\nüéØ CREATE BOUNTY BOARD\");\n    console.log(\"=\".repeat(25));\n    \n    const bountyTitle = await rl.question(\"Bounty title: \");\n    const bountyAmount = parseFloat(await rl.question(\"Prize amount (USDC): \"));\n    const entryFee = parseFloat(await rl.question(\"Entry fee per submission (USDC): \"));\n    const maxSubmissions = parseInt(await rl.question(\"Maximum submissions [10]: \") || \"10\");\n    const evaluationCriteria = await rl.question(\"How will you judge submissions: \");\n    const days = parseInt(await rl.question(\"Days until deadline [7]: \") || \"7\");\n    \n    const deadline = new Date();\n    deadline.setDate(deadline.getDate() + days);\n    \n    try {\n      const result = await this.callTool(\"setup_bounty_board\", {\n        bountyTitle,\n        bountyAmount,\n        entryFee,\n        maxSubmissions,\n        evaluationCriteria,\n        submissionDeadline: deadline.toISOString()\n      });\n      \n      this.displayResult(result);\n    } catch (error) {\n      console.error(\"‚ùå Bounty creation failed:\", error);\n    }\n  }\n\n  async demoMicropaymentService(rl: readline.Interface) {\n    console.log(\"\\nüîß CREATE MICROPAYMENT SERVICE\");\n    console.log(\"=\".repeat(30));\n    \n    const serviceName = await rl.question(\"Service name: \");\n    const pricePerUse = parseFloat(await rl.question(\"Price per use (USDC): \"));\n    \n    console.log(\"\\nService types: ai-query, data-analysis, api-access, content-generation, file-processing, custom\");\n    const serviceType = await rl.question(\"Service type [api-access]: \") || \"api-access\";\n    const serviceURL = await rl.question(\"Service URL (optional): \");\n    const affiliatePercentage = parseFloat(await rl.question(\"Affiliate percentage [10]: \") || \"10\");\n    \n    try {\n      const result = await this.callTool(\"create_micropayment_service\", {\n        serviceName,\n        pricePerUse,\n        serviceType,\n        serviceURL,\n        affiliatePercentage\n      });\n      \n      this.displayResult(result);\n    } catch (error) {\n      console.error(\"‚ùå Service creation failed:\", error);\n    }\n  }\n\n  async demoRevenueSplit(rl: readline.Interface) {\n    console.log(\"\\nüí∏ EXECUTE REVENUE SPLIT\");\n    console.log(\"=\".repeat(25));\n    \n    const totalAmount = parseFloat(await rl.question(\"Total amount to split (USDC): \"));\n    const numRecipients = parseInt(await rl.question(\"Number of recipients: \"));\n    \n    const recipients = [];\n    let remainingPercentage = 100;\n    \n    for (let i = 0; i < numRecipients; i++) {\n      console.log(`\\nRecipient ${i + 1}:`);\n      const address = await rl.question(\"  Wallet address: \");\n      const label = await rl.question(\"  Label: \");\n      \n      let percentage;\n      if (i === numRecipients - 1) {\n        percentage = remainingPercentage;\n        console.log(`  Percentage: ${percentage}% (remaining)`);\n      } else {\n        percentage = parseFloat(await rl.question(`  Percentage (${remainingPercentage}% remaining): `));\n        remainingPercentage -= percentage;\n      }\n      \n      recipients.push({ address, percentage, label });\n    }\n    \n    try {\n      const result = await this.callTool(\"revenue_split_payment\", {\n        totalAmount,\n        recipients\n      });\n      \n      this.displayResult(result);\n    } catch (error) {\n      console.error(\"‚ùå Revenue split failed:\", error);\n    }\n  }\n\n  async demoPaidAPI(rl: readline.Interface) {\n    console.log(\"\\nüì° PAID API CALL\");\n    console.log(\"=\".repeat(20));\n    \n    const url = await rl.question(\"API URL [https://httpbin.org/json]: \") || \"https://httpbin.org/json\";\n    const method = await rl.question(\"Method [GET]: \") || \"GET\";\n    \n    try {\n      const result = await this.callTool(\"call_paid_api\", {\n        url,\n        method\n      });\n      \n      this.displayResult(result);\n    } catch (error) {\n      console.error(\"‚ùå API call failed:\", error);\n    }\n  }\n\n  async callToolInteractively(toolName: string, rl: readline.Interface) {\n    const tool = this.tools.find(t => t.name === toolName);\n    if (!tool) {\n      console.log(`‚ùå Tool '${toolName}' not found`);\n      return;\n    }\n\n    console.log(`\\nüîß Calling: ${tool.name}`);\n    console.log(`üìù ${tool.description}`);\n\n    const args: any = {};\n    \n    if (tool.inputSchema?.properties) {\n      for (const [param, schema] of Object.entries(tool.inputSchema.properties)) {\n        const isRequired = tool.inputSchema.required?.includes(param);\n        const schemaObj = schema as any;\n        const prompt = `${param}${isRequired ? ' (required)' : ' (optional)'} [${schemaObj.type}]: `;\n        \n        const value = await rl.question(prompt);\n        \n        if (value) {\n          if (schemaObj.type === 'number') {\n            args[param] = parseFloat(value);\n          } else if (schemaObj.type === 'array') {\n            // Simple array parsing\n            args[param] = value.split(',').map(s => s.trim());\n          } else {\n            args[param] = value;\n          }\n        }\n      }\n    }\n\n    try {\n      const result = await this.callTool(toolName, args);\n      this.displayResult(result);\n    } catch (error) {\n      console.error(\"‚ùå Tool execution failed:\", error);\n    }\n  }\n\n  async cleanup() {\n    /**\n     * Clean up resources\n     */\n    if (this.mcp) {\n      await this.mcp.close();\n    }\n  }\n}\n\nasync function main() {\n  const serverPath = process.argv[2] || \"build/index.js\";\n  \n  console.log(\"üéØ PayFlow MCP Client\");\n  console.log(\"=====================\");\n  console.log(`Server: ${serverPath}`);\n  \n  const mcpClient = new PayFlowMCPClient();\n  \n  try {\n    await mcpClient.connectToServer(serverPath);\n    await mcpClient.interactiveLoop();\n  } catch (error) {\n    console.error(\"‚ùå Client failed:\", error);\n  } finally {\n    await mcpClient.cleanup();\n    process.exit(0);\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main();\n}\n\nexport { PayFlowMCPClient };\n"],"mappings":"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","names":[]}