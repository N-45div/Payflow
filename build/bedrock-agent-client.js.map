{"version":3,"sources":["../src/bedrock-agent-client.ts"],"sourcesContent":["import { BedrockAgentRuntimeClient, InvokeAgentCommand } from \"@aws-sdk/client-bedrock-agent-runtime\";\nimport { fromNodeProviderChain } from \"@aws-sdk/credential-providers\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n\ninterface BedrockPayFlowConfig {\n  region: string;\n  agentId: string;\n  agentAliasId: string;\n  sessionId?: string;\n  mcpServerPath?: string;\n}\n\nclass BedrockPayFlowAgent {\n  private client: BedrockAgentRuntimeClient;\n  private config: BedrockPayFlowConfig;\n  private sessionId: string;\n\n  constructor(config: BedrockPayFlowConfig) {\n    this.config = config;\n    this.sessionId = config.sessionId || `payflow-session-${Date.now()}`;\n    \n    // Initialize Bedrock client with credentials\n    this.client = new BedrockAgentRuntimeClient({\n      region: config.region,\n      credentials: fromNodeProviderChain(),\n    });\n  }\n\n  async invokeWithPayFlow(prompt: string): Promise<any> {\n    console.log(`ü§ñ Invoking Bedrock agent with PayFlow capabilities`);\n    console.log(`üí≠ Prompt: ${prompt}`);\n    \n    try {\n      const command = new InvokeAgentCommand({\n        agentId: this.config.agentId,\n        agentAliasId: this.config.agentAliasId,\n        sessionId: this.sessionId,\n        inputText: prompt,\n        enableTrace: true, // Enable to see MCP tool usage\n      });\n\n      const response = await this.client.send(command);\n      return this.processBedrockResponse(response);\n      \n    } catch (error: any) {\n      console.error(\"‚ùå Bedrock agent invocation failed:\", error);\n      throw new Error(`Bedrock agent error: ${error.message}`);\n    }\n  }\n\n  private async processBedrockResponse(response: any): Promise<string> {\n    let finalResponse = \"\";\n    let payflowActions = [];\n    \n    if (response.completion) {\n      // Handle streaming response\n      for await (const chunk of response.completion) {\n        if (chunk.chunk?.bytes) {\n          const text = new TextDecoder().decode(chunk.chunk.bytes);\n          finalResponse += text;\n        }\n        \n        // Track PayFlow tool usage\n        if (chunk.trace) {\n          const trace = JSON.parse(new TextDecoder().decode(chunk.trace.bytes));\n          if (trace.toolUse && trace.toolUse.toolName?.startsWith('payflow')) {\n            payflowActions.push(trace.toolUse);\n          }\n        }\n      }\n    }\n    \n    // Log PayFlow integrations\n    if (payflowActions.length > 0) {\n      console.log(`üí∞ PayFlow actions executed: ${payflowActions.length}`);\n      payflowActions.forEach(action => {\n        console.log(`  üîß ${action.toolName}: ${JSON.stringify(action.input, null, 2)}`);\n      });\n    }\n    \n    return finalResponse;\n  }\n\n  async createPayflowBounty(title: string, amount: number, entryFee: number): Promise<any> {\n    const prompt = `Create a PayFlow bounty with these details:\n    - Title: ${title}\n    - Prize: ${amount} USDC\n    - Entry fee: ${entryFee} USDC\n    - Max submissions: 10\n    - Evaluation criteria: Best creative submission\n    - Deadline: 7 days from now\n    \n    Use the PayFlow tools to set this up and provide the bounty ID.`;\n    \n    return await this.invokeWithPayFlow(prompt);\n  }\n\n  async submitBountyEntry(bountyId: string, submission: string, walletAddress: string): Promise<any> {\n    const prompt = `Submit an entry to PayFlow bounty ${bountyId}:\n    - Submission: ${submission}\n    - Type: text\n    - My wallet: ${walletAddress}\n    \n    Process the payment and confirm the submission.`;\n    \n    return await this.invokeWithPayFlow(prompt);\n  }\n\n  async analyzePayFlowMetrics(): Promise<any> {\n    const prompt = `Analyze my PayFlow metrics and provide insights:\n    - Show total bounties created\n    - Revenue generated\n    - Success rates\n    - Recommendations for optimization\n    \n    Use the PayFlow analytics tools to get real data.`;\n    \n    return await this.invokeWithPayFlow(prompt);\n  }\n\n  async createAIPoweredService(serviceIdea: string): Promise<any> {\n    const prompt = `Help me create a micropayment AI service based on this idea: \"${serviceIdea}\"\n    \n    Use PayFlow tools to:\n    1. Set up the service configuration\n    2. Define pricing strategy\n    3. Configure revenue splits\n    4. Provide implementation guidance\n    \n    Make it ready for autonomous operation.`;\n    \n    return await this.invokeWithPayFlow(prompt);\n  }\n}\n\nexport { BedrockPayFlowAgent, BedrockPayFlowConfig };\n"],"mappings":";;;AAAA,SAAS,2BAA2B,0BAA0B;AAC9D,SAAS,6BAA6B;AAYtC,IAAM,sBAAN,MAA0B;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,QAA8B;AACxC,SAAK,SAAS;AACd,SAAK,YAAY,OAAO,aAAa,mBAAmB,KAAK,IAAI,CAAC;AAGlE,SAAK,SAAS,IAAI,0BAA0B;AAAA,MAC1C,QAAQ,OAAO;AAAA,MACf,aAAa,sBAAsB;AAAA,IACrC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,kBAAkB,QAA8B;AACpD,YAAQ,IAAI,4DAAqD;AACjE,YAAQ,IAAI,qBAAc,MAAM,EAAE;AAElC,QAAI;AACF,YAAM,UAAU,IAAI,mBAAmB;AAAA,QACrC,SAAS,KAAK,OAAO;AAAA,QACrB,cAAc,KAAK,OAAO;AAAA,QAC1B,WAAW,KAAK;AAAA,QAChB,WAAW;AAAA,QACX,aAAa;AAAA;AAAA,MACf,CAAC;AAED,YAAM,WAAW,MAAM,KAAK,OAAO,KAAK,OAAO;AAC/C,aAAO,KAAK,uBAAuB,QAAQ;AAAA,IAE7C,SAAS,OAAY;AACnB,cAAQ,MAAM,2CAAsC,KAAK;AACzD,YAAM,IAAI,MAAM,wBAAwB,MAAM,OAAO,EAAE;AAAA,IACzD;AAAA,EACF;AAAA,EAEA,MAAc,uBAAuB,UAAgC;AACnE,QAAI,gBAAgB;AACpB,QAAI,iBAAiB,CAAC;AAEtB,QAAI,SAAS,YAAY;AAEvB,uBAAiB,SAAS,SAAS,YAAY;AAC7C,YAAI,MAAM,OAAO,OAAO;AACtB,gBAAM,OAAO,IAAI,YAAY,EAAE,OAAO,MAAM,MAAM,KAAK;AACvD,2BAAiB;AAAA,QACnB;AAGA,YAAI,MAAM,OAAO;AACf,gBAAM,QAAQ,KAAK,MAAM,IAAI,YAAY,EAAE,OAAO,MAAM,MAAM,KAAK,CAAC;AACpE,cAAI,MAAM,WAAW,MAAM,QAAQ,UAAU,WAAW,SAAS,GAAG;AAClE,2BAAe,KAAK,MAAM,OAAO;AAAA,UACnC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,eAAe,SAAS,GAAG;AAC7B,cAAQ,IAAI,uCAAgC,eAAe,MAAM,EAAE;AACnE,qBAAe,QAAQ,YAAU;AAC/B,gBAAQ,IAAI,eAAQ,OAAO,QAAQ,KAAK,KAAK,UAAU,OAAO,OAAO,MAAM,CAAC,CAAC,EAAE;AAAA,MACjF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,oBAAoB,OAAe,QAAgB,UAAgC;AACvF,UAAM,SAAS;AAAA,eACJ,KAAK;AAAA,eACL,MAAM;AAAA,mBACF,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAOvB,WAAO,MAAM,KAAK,kBAAkB,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAM,kBAAkB,UAAkB,YAAoB,eAAqC;AACjG,UAAM,SAAS,qCAAqC,QAAQ;AAAA,oBAC5C,UAAU;AAAA;AAAA,mBAEX,aAAa;AAAA;AAAA;AAI5B,WAAO,MAAM,KAAK,kBAAkB,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAM,wBAAsC;AAC1C,UAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,WAAO,MAAM,KAAK,kBAAkB,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAM,uBAAuB,aAAmC;AAC9D,UAAM,SAAS,iEAAiE,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU3F,WAAO,MAAM,KAAK,kBAAkB,MAAM;AAAA,EAC5C;AACF;","names":[]}