{"version":3,"sources":["../src/bedrock-setup.ts","../src/setup-bedrock.ts"],"sourcesContent":["import { BedrockAgentClient, CreateAgentCommand, CreateAgentActionGroupCommand } from \"@aws-sdk/client-bedrock-agent\";\nimport { fromNodeProviderChain } from \"@aws-sdk/credential-providers\";\n\ninterface PayFlowBedrockSetup {\n    region: string;\n    agentName: string;\n    roleArn: string; // IAM role for Bedrock agent\n    mcpServerEndpoint?: string;\n}\n\nclass PayFlowBedrockSetup {\n    private client: BedrockAgentClient;\n\n    constructor(region: string) {\n        this.client = new BedrockAgentClient({\n            region,\n            credentials: fromNodeProviderChain(),\n        });\n    }\n\n    async setupPayFlowAgent(config: PayFlowBedrockSetup): Promise<string> {\n        console.log(\"ü§ñ Setting up PayFlow Bedrock Agent...\");\n\n        try {\n            // 1. Create the agent\n            const agentCommand = new CreateAgentCommand({\n                agentName: config.agentName,\n                description: \"PayFlow autonomous payment agent with MCP integration\",\n                instruction: `You are PayFlow, an autonomous payment processing AI agent.\n\nYour capabilities include:\n- Creating and managing bounty boards with real USDC payments\n- Processing micropayments for AI services\n- Executing revenue splits to multiple recipients\n- Analyzing financial metrics and performance\n- Setting up payment gateways and services\n\nYou have access to PayFlow MCP tools that can:\n- setup_bounty_board: Create bounties with entry fees and prizes\n- submit_bounty_entry: Submit to bounties with real payments\n- call_paid_api: Make paid API calls with automatic payment\n- revenue_split_payment: Split payments to multiple wallets\n- create_micropayment_service: Set up pay-per-use services\n- view_payflow_analytics: Get comprehensive financial analytics\n- get_wallet_details: Check wallet status and balances\n\nAlways:\n1. Confirm payment amounts before executing transactions\n2. Provide clear financial summaries\n3. Explain the autonomous payment flow to users\n4. Log all transactions for audit purposes\n5. Suggest optimizations for revenue generation\n\nYou work with real money - be precise and secure in all operations.`,\n                agentResourceRoleArn: config.roleArn,\n                foundationModel: \"anthropic.claude-3-sonnet-20240229-v1:0\", // or your preferred model\n            });\n\n            const agentResponse = await this.client.send(agentCommand);\n            const agentId = agentResponse.agent?.agentId;\n\n            if (!agentId) {\n                throw new Error(\"Failed to create agent\");\n            }\n\n            console.log(`‚úÖ Created PayFlow Bedrock Agent: ${agentId}`);\n\n            // 2. Create MCP action group\n            await this.createMCPActionGroup(agentId, config.mcpServerEndpoint || \"http://localhost:3402\");\n\n            return agentId;\n\n        } catch (error: any) {\n            console.error(\"‚ùå Bedrock agent setup failed:\", error);\n            throw new Error(`Agent setup failed: ${error.message}`);\n        }\n    }\n\n    private async createMCPActionGroup(agentId: string, mcpEndpoint: string): Promise<void> {\n        console.log(\"üîß Setting up MCP action group...\");\n\n        const actionGroupCommand = new CreateAgentActionGroupCommand({\n            agentId: agentId,\n            agentVersion: \"DRAFT\",\n            actionGroupName: \"PayFlowMCPActions\",\n            description: \"PayFlow MCP server integration for autonomous payments\",\n\n            // MCP server configuration\n            parentActionGroupSignature: \"AMAZON.UserInput\",\n\n            actionGroupExecutor: {\n                customControl: \"RETURN_CONTROL\" // Let MCP handle execution\n            },\n\n            // Define the MCP tools schema\n            functionSchema: {\n                functions: [\n                    {\n                        name: \"setup_bounty_board\",\n                        description: \"Create a bounty board with real payment collection\",\n                        parameters: {\n                            type: \"object\",\n                            properties: {\n                                bountyTitle: { type: \"string\" },\n                                bountyAmount: { type: \"number\" },\n                                entryFee: { type: \"number\" },\n                                maxSubmissions: { type: \"number\" },\n                                evaluationCriteria: { type: \"string\" },\n                                submissionDeadline: { type: \"string\" }\n                            },\n                            required: [\"bountyTitle\", \"bountyAmount\", \"entryFee\", \"evaluationCriteria\", \"submissionDeadline\"]\n                        }\n                    },\n                    {\n                        name: \"submit_bounty_entry\",\n                        description: \"Submit entry with real payment processing\",\n                        parameters: {\n                            type: \"object\",\n                            properties: {\n                                bountyId: { type: \"string\" },\n                                submissionData: { type: \"string\" },\n                                submissionType: { type: \"string\" },\n                                submitterWallet: { type: \"string\" }\n                            },\n                            required: [\"bountyId\", \"submissionData\", \"submissionType\", \"submitterWallet\"]\n                        }\n                    },\n                    {\n                        name: \"call_paid_api\",\n                        description: \"Make paid API call with automatic payment\",\n                        parameters: {\n                            type: \"object\",\n                            properties: {\n                                url: { type: \"string\" },\n                                method: { type: \"string\" },\n                                data: { type: \"object\" },\n                                headers: { type: \"object\" }\n                            },\n                            required: [\"url\"]\n                        }\n                    },\n                    {\n                        name: \"revenue_split_payment\",\n                        description: \"Execute automatic revenue splits\",\n                        parameters: {\n                            type: \"object\",\n                            properties: {\n                                totalAmount: { type: \"number\" },\n                                recipients: {\n                                    type: \"array\",\n                                    items: {\n                                        type: \"object\",\n                                        properties: {\n                                            address: { type: \"string\" },\n                                            percentage: { type: \"number\" },\n                                            label: { type: \"string\" }\n                                        },\n                                        required: [\"address\", \"percentage\"]\n                                    }\n                                }\n                            },\n                            required: [\"totalAmount\", \"recipients\"]\n                        }\n                    },\n                    {\n                        name: \"view_payflow_analytics\",\n                        description: \"Get comprehensive financial analytics\",\n                        parameters: {\n                            type: \"object\",\n                            properties: {\n                                timeframe: { type: \"string\", enum: [\"today\", \"week\", \"month\", \"all\"] }\n                            }\n                        }\n                    },\n                    {\n                        name: \"get_wallet_details\",\n                        description: \"Check wallet status and payment capabilities\",\n                        parameters: {\n                            type: \"object\",\n                            properties: {}\n                        }\n                    }\n                ]\n            }\n        });\n\n        await this.client.send(actionGroupCommand);\n        console.log(\"‚úÖ MCP action group created successfully\");\n    }\n}\n\nexport { PayFlowBedrockSetup };\n\n","import { PayFlowBedrockSetup } from \"./bedrock-setup.js\";\nimport { config } from \"dotenv\";\nimport * as readline from 'node:readline/promises';\n\nconfig();\n\nasync function setupBedrockIntegration() {\n  console.log(\"ü§ñ PayFlow Bedrock Integration Setup\");\n  console.log(\"=\" .repeat(40));\n  \n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  \n  try {\n    // Get configuration\n    const region = await rl.question(\"AWS Region [us-east-1]: \") || \"us-east-1\";\n    const agentName = await rl.question(\"Agent Name [PayFlow-Agent]: \") || \"PayFlow-Agent\";\n    const roleArn = await rl.question(\"IAM Role ARN (required): \");\n    \n    if (!roleArn) {\n      throw new Error(\"IAM Role ARN is required for Bedrock agent\");\n    }\n    \n    const mcpEndpoint = await rl.question(\"MCP Server URL [http://localhost:3402]: \") || \"http://localhost:3402\";\n    \n    console.log(\"\\nüîß Creating Bedrock agent...\");\n    \n    const setup = new PayFlowBedrockSetup(region);\n    const agentId = await setup.setupPayFlowAgent({\n      region,\n      agentName,\n      roleArn,\n      mcpServerEndpoint: mcpEndpoint\n    });\n    \n    console.log(\"\\n‚úÖ Bedrock agent setup complete!\");\n    console.log(`Agent ID: ${agentId}`);\n    console.log(\"\\nüìù Add to your .env file:\");\n    console.log(`AWS_REGION=${region}`);\n    console.log(`BEDROCK_AGENT_ID=${agentId}`);\n    console.log(`BEDROCK_AGENT_ALIAS_ID=TSTALIASID`);\n    \n    console.log(\"\\nüöÄ Next steps:\");\n    console.log(\"1. Add the environment variables above\");\n    console.log(\"2. Start PayFlow MCP server: npm run dev\");\n    console.log(\"3. Run Bedrock client: npm run bedrock\");\n    \n  } catch (error: any) {\n    console.error(\"‚ùå Setup failed:\", error.message);\n  } finally {\n    rl.close();\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  setupBedrockIntegration();\n}\n"],"mappings":"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","names":["config"]}